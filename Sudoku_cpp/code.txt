Sudoku.h
#ifndef SUDOKU_H
#define SUDOKU_H

#include <vector>
#include <string>
#include <iostream>

class Sudoku {
private:
    std::vector<std::vector<int>> grid;
    const int BOX_SIZE = 3;
    const int GRID_SIZE = 9;

public:
    Sudoku(const std::string& input);
    std::vector<std::vector<int>>& getGrid();
    std::vector<int> getRow(int row);
    std::vector<int> getColumn(int col);
    std::vector<int> getBox(int row, int col);
    bool isSafe(int row, int col, int num);
    bool solve();
    void fillCandidates();
};

#endif // SUDOKU_H


Sudoku.cpp
#include "Sudoku.h"

Sudoku::Sudoku(const std::string& input) {
    grid.resize(GRID_SIZE, std::vector<int>(GRID_SIZE, 0));
    for (int i = 0; i < input.length(); i++) {
        int num = input[i] - '0';
        grid[i / GRID_SIZE][i % GRID_SIZE] = num;
    }
}

std::vector<std::vector<int>>& Sudoku::getGrid() {
    return grid;
}

std::vector<int> Sudoku::getRow(int row) {
    return grid[row];
}

std::vector<int> Sudoku::getColumn(int col) {
    std::vector<int> column(GRID_SIZE, 0);
    for (int i = 0; i < GRID_SIZE; i++) {
        column[i] = grid[i][col];
    }
    return column;
}

std::vector<int> Sudoku::getBox(int row, int col) {
    std::vector<int> box(BOX_SIZE * BOX_SIZE, 0);
    int index = 0;
    for (int i = 0; i < BOX_SIZE; i++) {
        for (int j = 0; j < BOX_SIZE; j++) {
            box[index++] = grid[row - row % BOX_SIZE + i][col - col % BOX_SIZE + j];
        }
    }
    return box;
}


bool Sudoku::isSafe(int row, int col, int num) {
    // Check row
    for (int j = 0; j < GRID_SIZE; j++) {
        if (grid[row][j] == num) return false;
    }
    // Check column
    for (int i = 0; i < GRID_SIZE; i++) {
        if (grid[i][col] == num) return false;
    }
    // Check box
    int startRow = row - row % BOX_SIZE, startCol = col - col % BOX_SIZE;
    for (int i = 0; i < BOX_SIZE; i++) {
        for (int j = 0; j < BOX_SIZE; j++) {
            if (grid[i + startRow][j + startCol] == num) return false;
        }
    }
    return true;
}

bool Sudoku::solve() {
    for (int i = 0; i < GRID_SIZE; i++) {
        for (int j = 0; j < GRID_SIZE; j++) {
            if (grid[i][j] == 0) {
                for (int num = 1; num <= 9; num++) {
                    if (isSafe(i, j, num)) {
                        grid[i][j] = num;
                        if (solve()) return true;
                        grid[i][j] = 0; // Backtrack
                    }
                }
                return false;
            }
        }
    }
    return true;
}

void Sudoku::fillCandidates() {
    // This is a placeholder for the actual candidate filling logic
    // For now, we'll just solve the Sudoku
    solve();
}



test.cpp
#include "Sudoku.h"
#include <cassert>

int main() {
    std::string input = "017903600000080000900000507072010430000402070064370250701000065000030000005601720";
    Sudoku sudoku(input);

    std::vector<std::vector<int>> grid = sudoku.getGrid();
    assert(grid[0][0] == 0);
    assert(grid[8][8] == 0);

    std::vector<int> row = sudoku.getRow(0);
    std::vector<int> expectedRow = {0, 1, 7, 9, 0, 3, 6, 0, 0};
    assert(row == expectedRow);
    
    std::vector<int> expectedCol = {0, 0, 9, 0, 0, 0, 7, 0, 0};
    std::vector<int> col = sudoku.getColumn(0);
    assert(col == expectedCol);
    
    std::vector<int> expectedBox = {0, 1, 7, 0, 0, 0, 9, 0, 0};
    std::vector<int> box = sudoku.getBox(0, 0);
    assert(box == expectedBox);
    



    assert(sudoku.solve()==true);

    std::cout << "All tests passed!" << std::endl;
    return 0;
}